# -*- coding: utf-8 -*-
"""appxy.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1lLUGR1zz9bHvb8pRmqbY2U243j4AQ4pt
"""

import streamlit as st
import pandas as pd
import numpy as np
import joblib

# --- Load Model and Features ---
model = joblib.load("logistic_model.pkl")
features = joblib.load("feature_columns.pkl")

# --- Category Mapping ---
category_map = {
    "Film & Animation": 1, "Autos & Vehicles": 2, "Music": 10,
    "Pets & Animals": 15, "Sports": 17, "Travel & Events": 19,
    "Gaming": 20, "People & Blogs": 22, "Comedy": 23, "Entertainment": 24,
    "News & Politics": 25, "Howto & Style": 26, "Education": 27,
    "Science & Technology": 28, "Nonprofits & Activism": 29
}

# --- App Header ---
st.set_page_config(page_title="YouTube Virality Predictor", page_icon="üé¨")
st.title("üé¨ YouTube Virality Predictor")
st.markdown("""
Predict whether a YouTube video will go viral based on early engagement metrics.
""")

# --- Explanation Box ---
with st.expander("‚ÑπÔ∏è What are Like Ratio and Comment Ratio?"):
    st.markdown("""
    - **Like Ratio** = likes / (likes + dislikes + 1)
      ‚Üí Measures how positively viewers are reacting.

    - **Comment Ratio** = comment_count / (views + 1)
      ‚Üí Reflects how actively people are engaging.
    """)

# --- User Inputs ---
st.header("üìä Video Inputs")

category_name = st.selectbox("Video Category", sorted(category_map.keys()))
category_id = category_map[category_name]

comments_disabled = st.checkbox("Comments Disabled?")
ratings_disabled = st.checkbox("Ratings Disabled?")
video_error_or_removed = st.checkbox("Video Error or Removed?")
publish_hour = st.slider("Publish Hour (0 = Midnight)", 0, 23, 12)
publish_dayofweek = st.selectbox("Day of Week Published", list(range(7)), format_func=lambda x: ["Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sun"][x])
days_since_publish = st.slider("Days Since Published", 0, 60, 10)
like_ratio = st.slider("Like Ratio", 0.0, 1.0, 0.95)
comment_ratio = st.slider("Comment Ratio", 0.0, 0.1, 0.01)

# --- Create Input DataFrame ---
input_data = {
    "comments_disabled": int(comments_disabled),
    "ratings_disabled": int(ratings_disabled),
    "video_error_or_removed": int(video_error_or_removed),
    "publish_hour": publish_hour,
    "publish_dayofweek": publish_dayofweek,
    "days_since_publish": days_since_publish,
    "like_ratio": like_ratio,
    "comment_ratio": comment_ratio,
    "category_id": category_id
}

df = pd.DataFrame([input_data])
df = pd.get_dummies(df, columns=["category_id"], prefix="category_id")

# --- Fill Missing Feature Columns ---
for col in features:
    if col not in df.columns:
        df[col] = 0
df = df[features]

# --- Prediction ---
prob = model.predict_proba(df)[0][1]

# --- Output ---
st.markdown(f"## üîÆ Predicted Probability of Virality: **{prob:.2%}**")

st.markdown("---")
st.caption("Model trained on borderline-view YouTube videos using logistic regression.")